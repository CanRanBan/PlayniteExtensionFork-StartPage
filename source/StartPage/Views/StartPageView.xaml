<UserControl x:Class="LandingPage.Views.StartPageView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:LandingPage.Views"
             xmlns:viewModels="clr-namespace:LandingPage.ViewModels"
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             xmlns:conv="clr-namespace:LandingPage.Converters"
             xmlns:pn="clr-namespace:Playnite.SDK;assembly=Playnite.SDK" xmlns:controls="clr-namespace:LandingPage.Controls" xmlns:system1="clr-namespace:System;assembly=System"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800"
             d:DataContext="{d:DesignInstance IsDesignTimeCreatable=False, Type={x:Type viewModels:StartPageViewModel}}"
             Background="Transparent">
    <UserControl.Resources>
        <sys:Boolean x:Key="True">True</sys:Boolean>
        <sys:Boolean x:Key="False">False</sys:Boolean>
        <conv:IEnumerableNullOrEmptyToVisibilityConverter x:Key="IEnumerableNullOrEmptyToVisibilityConverter"/>
        <conv:VisibilityInverter x:Key="VisibilityInverter"/>
        <conv:UriToBitmapImageConverter x:Key="UriToBitmapImageConverter"/>
        <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource BaseTextBlockStyle}" />
        <BitmapImage x:Key="InnerGlowBitmap" CreateOptions="IgnoreColorProfile" UriSource="pack://application:,,,/StartPagePlugin;component/innerglow.png" CacheOption="OnLoad"/>
        <BitmapImage x:Key="NoiseImage" CreateOptions="IgnoreColorProfile" UriSource="pack://application:,,,/StartPagePlugin;component/noise.png" CacheOption="OnLoad"/>
        <BitmapImage x:Key="DarkNoiseImage" CreateOptions="IgnoreColorProfile" UriSource="pack://application:,,,/StartPagePlugin;component/dark_noise.png" CacheOption="OnLoad"/>
        <BitmapImage x:Key="WhiteNoiseImage" CreateOptions="IgnoreColorProfile" UriSource="pack://application:,,,/StartPagePlugin;component/white_noise.png" CacheOption="OnLoad"/>
        <ImageBrush x:Key="NoiseBrush" ImageSource="{StaticResource NoiseImage}" TileMode="Tile" Viewport="0,0,100,100" ViewportUnits="Absolute"
                    Opacity="1"/>
        <ImageBrush x:Key="DarkNoiseBrush" ImageSource="{StaticResource DarkNoiseImage}" TileMode="Tile" Viewport="0,0,100,100" ViewportUnits="Absolute"
                    Opacity="1"/>
        <ImageBrush x:Key="WhiteNoiseBrush" ImageSource="{StaticResource WhiteNoiseImage}" TileMode="Tile" Viewport="0,0,100,100" ViewportUnits="Absolute"
                    Opacity="0.5"/>
        <BitmapImage x:Key="TransparentNoiseImage" CreateOptions="IgnoreColorProfile" UriSource="pack://application:,,,/StartPagePlugin;component/transparent_noise.png" CacheOption="OnLoad"/>
        <ImageBrush x:Key="TransparentNoiseBrush" ImageSource="{StaticResource TransparentNoiseImage}" TileMode="Tile" Viewport="0,0,100,100" ViewportUnits="Absolute"  
                    Opacity="0.15" RenderOptions.BitmapScalingMode="LowQuality"/>
    </UserControl.Resources>
    <UserControl.InputBindings>
        <KeyBinding Command="{Binding ExitEditModeCommand}" Key="Esc"/>
    </UserControl.InputBindings>
    <UserControl.ContextMenu>
        <ContextMenu Grid.IsSharedSizeScope="True">
            <MenuItem x:Name="NextBackgroundEntry" Command="{Binding NextRandomBackgroundCommand}" Header="{DynamicResource LOC_SPG_NextRandomBackground}" 
                                      Visibility="{Binding IsEnabled, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource BooleanToVisibilityConverter}}"/>

            <MenuItem>
                <MenuItem.Header>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition SharedSizeGroup="PropertyName"/>
                            <ColumnDefinition SharedSizeGroup="Value"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Text="{DynamicResource LOC_SPG_BlurAmount}" VerticalAlignment="Center" Margin="0,0,5,0"/>
                        <Slider Grid.Column="1" Value="{Binding Settings.Settings.BlurAmount}" Minimum="0" Maximum="100" Width="100" VerticalAlignment="Center" 
                                                IsSnapToTickEnabled="True" TickFrequency="1" SmallChange="1"/>
                    </Grid>
                </MenuItem.Header>
            </MenuItem>
            <MenuItem>
                <MenuItem.Header>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition SharedSizeGroup="PropertyName"/>
                            <ColumnDefinition SharedSizeGroup="Value"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Text="{DynamicResource LOC_SPG_OverlayOpacity}" VerticalAlignment="Center" Margin="0,0,5,0"/>
                        <Slider Grid.Column="1" Value="{Binding Settings.Settings.OverlayOpacity}" Minimum="0" Maximum="1" Width="100" VerticalAlignment="Center" 
                                                IsSnapToTickEnabled="True" TickFrequency="0.01" SmallChange="0.01"/>
                    </Grid>
                </MenuItem.Header>
            </MenuItem>
            <MenuItem>
                <MenuItem.Header>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition SharedSizeGroup="PropertyName"/>
                            <ColumnDefinition SharedSizeGroup="Value"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Text="{DynamicResource LOC_SPG_NoiseOpacity}" VerticalAlignment="Center" Margin="0,0,5,0"/>
                        <Slider Grid.Column="1" Value="{Binding Settings.Settings.NoiseOpacity}" Minimum="0" Maximum="1" Width="100" VerticalAlignment="Center" 
                                                IsSnapToTickEnabled="True" TickFrequency="0.01" SmallChange="0.01"/>
                    </Grid>
                </MenuItem.Header>
            </MenuItem>
            <MenuItem>
                <MenuItem.Header>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition SharedSizeGroup="PropertyName"/>
                            <ColumnDefinition SharedSizeGroup="Value"/>
                        </Grid.ColumnDefinitions>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="{DynamicResource LOC_SPG_Padding}" VerticalAlignment="Center">
                            </TextBlock>
                            <TextBlock Text=":" Margin="0,0,5,0"/>
                        </StackPanel>
                        <Slider Grid.Column="1" Value="{Binding Settings.Settings.Padding}" Minimum="0" Maximum="200" Width="100" VerticalAlignment="Center" 
                                                IsSnapToTickEnabled="True" TickFrequency="1" SmallChange="1"/>
                    </Grid>
                </MenuItem.Header>
            </MenuItem>
            <Separator/>
            <MenuItem Command="{Binding OpenSettingsCommand}" Header="{DynamicResource LOCMenuPlayniteSettingsTitle}"/>
            <Separator/>
            <MenuItem Command="{Binding EnterEditModeCommand}" Header="{DynamicResource LOC_SPG_EnterEditMode}"
                      Visibility="{Binding RootNodeViewModel.EditModeEnabled, Converter={StaticResource InvertedBooleanToVisibilityConverter}}"/>
            <MenuItem Command="{Binding ExitEditModeCommand}" Header="{DynamicResource LOC_SPG_ExitEditMode}"
                      Visibility="{Binding RootNodeViewModel.EditModeEnabled, Converter={StaticResource BooleanToVisibilityConverter}}"/>
        </ContextMenu>
    </UserControl.ContextMenu>
    <Grid>
        <local:BackgroundView DataContext="{Binding BackgroundViewModel}" Visibility="{Binding Settings.Settings.EnableGlobalBackground, Converter={StaticResource InvertedBooleanToVisibilityConverter}}"/>
        <Border>
            <Border.Background>
                <SolidColorBrush Color="{DynamicResource WhiteColor}"/>
            </Border.Background>
            <Border.Style>
                <Style TargetType="Border" BasedOn="{StaticResource {x:Type Border}}">
                    <Setter Property="Opacity" Value="0"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding RootNodeViewModel.EditModeEnabled}" Value="{StaticResource True}">
                            <DataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.3" To="0.2"
                                                         Storyboard.TargetProperty="Opacity">
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.3" To="0"
                                                         Storyboard.TargetProperty="Opacity">
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.ExitActions>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Border.Style>
        </Border>
        <ScrollViewer x:Name="StartPageScrollViewer" HorizontalScrollBarVisibility="Disabled" Padding="{Binding Settings.Settings.Padding}">
            <local:GridNodeView DataContext="{Binding RootNodeViewModel}">
                <local:GridNodeView.RenderTransform>
                    <ScaleTransform/>
                </local:GridNodeView.RenderTransform>
                <local:GridNodeView.Style>
                    <Style TargetType="local:GridNodeView">
                        <Style.Resources>
                            <ElasticEase x:Key="EasingFunctiton" Oscillations="1"/>
                        </Style.Resources>
                        <Setter Property="RenderTransformOrigin" Value="0.5,0.5"/>
                        <Setter Property="Height" Value="{Binding ActualHeight, ElementName=StartPageScrollViewer}"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=local:StartPageView, Mode=FindAncestor}, Path=DataContext.Settings.Settings.FixGridSize}" Value="{StaticResource True}">
                                <Setter Property="Height" Value="{Binding RelativeSource={RelativeSource AncestorType=local:StartPageView, Mode=FindAncestor}, Path=DataContext.Settings.Settings.FixedGridHeight}"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding EditModeEnabled}" Value="{StaticResource True}">
                                <DataTrigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Duration="0:0:0.3" To="0.95"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleX"
                                                         EasingFunction="{StaticResource EasingFunctiton}">
                                            </DoubleAnimation>
                                            <DoubleAnimation Duration="0:0:0.3" To="0.95"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleY"
                                                         EasingFunction="{StaticResource EasingFunctiton}">
                                            </DoubleAnimation>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </DataTrigger.EnterActions>
                                <DataTrigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Duration="0:0:0.3" To="1"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleX"
                                                         EasingFunction="{StaticResource EasingFunctiton}">
                                            </DoubleAnimation>
                                            <DoubleAnimation Duration="0:0:0.3" To="1"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleY"
                                                         EasingFunction="{StaticResource EasingFunctiton}">
                                            </DoubleAnimation>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </DataTrigger.ExitActions>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </local:GridNodeView.Style>
            </local:GridNodeView>
        </ScrollViewer>
        <Button Content="{DynamicResource LOC_SPG_ExitEditMode}" Command="{Binding ExitEditModeCommand}" HorizontalAlignment="Center" VerticalAlignment="Bottom"
                Visibility="{Binding RootNodeViewModel.EditModeEnabled, Converter={StaticResource BooleanToVisibilityConverter}}"
                Margin="10"/>
        <Grid HorizontalAlignment="Center" VerticalAlignment="Top" x:Name="NotificationGrid" ClipToBounds="True"
              Width="360" Margin="0" Visibility="{Binding Settings.Settings.EnableNotifications, Converter={StaticResource BooleanToVisibilityConverter}}">
            <Border Padding="0" VerticalAlignment="Top" HorizontalAlignment="Center" Margin="0,31,0,0"
                    Visibility="{Binding ElementName=NotificationsBorder, Path=Tag, Converter={StaticResource VisibilityInverter}}">
                <Button Visibility="{Binding Notifications, Converter={StaticResource IEnumerableNullOrEmptyToVisibilityConverter}}"
                        ClickMode="Release" Click="ToggleNotifications_Click">
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="{DynamicResource LOCNotifications}"/>
                        <Border Background="{DynamicResource GlyphBrush}" CornerRadius="9" Margin="5,0,0,0" MinWidth="18">
                            <TextBlock Text="{Binding Notifications.Count}" Padding="3,1" 
                                       HorizontalAlignment="Center" VerticalAlignment="Center"
                                       TextAlignment="Center"/>
                        </Border>
                    </StackPanel>
                </Button>
            </Border>
            <Border x:Name="NotificationsBorder" 
                CornerRadius="0,0,5,5">
                <Border.Background>
                    <SolidColorBrush Color="{DynamicResource PopupBackgroundColor}" Opacity="0.5"/>
                </Border.Background>
                <Border.Style>
                    <Style TargetType="{x:Type Border}">
                        <Setter Property="Tag" Value="{x:Static Visibility.Collapsed}"/>
                        <Setter Property="RenderTransform">
                            <Setter.Value>
                                <TranslateTransform Y="-550" x:Name="NotifactionRenderTransform"/>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Tag, Mode=OneWay}" Value="{x:Static Visibility.Visible}">
                                <DataTrigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation
                                                To="-50"
                                                Storyboard.TargetProperty="(Border.RenderTransform).(TranslateTransform.Y)">
                                                <DoubleAnimation.EasingFunction>
                                                    <ElasticEase Springiness="12" Oscillations="2" EasingMode="EaseOut"/>
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </DataTrigger.EnterActions>
                                <DataTrigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Duration="0:0:0.25"
                                                To="-600"
                                                Storyboard.TargetProperty="(Border.RenderTransform).(TranslateTransform.Y)">
                                            </DoubleAnimation>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </DataTrigger.ExitActions>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Settings.Settings.MinimizeNotificationsOnLaunch, Mode=OneWay}" Value="{StaticResource False}">
                                <Setter Property="Tag" Value="{Binding Notifications, Converter={StaticResource IEnumerableNullOrEmptyToVisibilityConverter}}"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Border.Style>
                <StackPanel x:Name="NotificationPanel" 
                        Margin="5,50,5,5">
                    <Border Height="{Binding ElementName=ProgressbarGrid, Path=ActualHeight}" 
                            Visibility="{Binding ElementName=ProgressbarGrid, Path=Visibility}"
                            Background="Transparent" BorderThickness="0"/>
                    <TextBlock HorizontalAlignment="Center" VerticalAlignment="Bottom"
                               Text="{DynamicResource LOCNotifications}"
                               Margin="0,6,0,4"/>
                    <ItemsControl ItemsSource="{Binding Notifications}"
                              VirtualizingPanel.ScrollUnit="Pixel"
                              VirtualizingPanel.IsVirtualizing="True"
                              VirtualizingPanel.VirtualizationMode="Recycling"
                              MaxHeight="300"
                              x:Name="NotificationItemsControl">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <VirtualizingStackPanel/>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.Template>
                            <ControlTemplate TargetType="ItemsControl">
                                <Border BorderThickness="{TemplateBinding BorderThickness}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    Background="{TemplateBinding Background}">
                                    <ScrollViewer x:Name="ScrollViewer"
                                              CanContentScroll="True" 
                                              Padding="{TemplateBinding Padding}"
                                              Focusable="False"
                                              HorizontalScrollBarVisibility="Disabled"
                                              VerticalScrollBarVisibility="Auto"
                                              >
                                        <ItemsPresenter/>
                                    </ScrollViewer>
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="ComputedVerticalScrollBarVisibility" SourceName="ScrollViewer"
                                         Value="Visible">
                                        <Setter Property="Margin" Value="0,0,-16,0" TargetName="ScrollViewer"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </ItemsControl.Template>
                        <ItemsControl.ItemTemplate>
                            <DataTemplate DataType="{x:Type pn:NotificationMessage}">
                                <Grid Margin="0,2" Background="Transparent">
                                    <Border CornerRadius="5" Opacity="0.15"
                                            x:Name="ItemBackground" Background="White">
                                        <Border.OpacityMask>
                                            <LinearGradientBrush StartPoint="0,0.5">
                                                <LinearGradientBrush.GradientStops>
                                                    <GradientStop Color="White"/>
                                                    <GradientStop Color="Transparent" Offset="1"/>
                                                </LinearGradientBrush.GradientStops>
                                            </LinearGradientBrush>
                                        </Border.OpacityMask>
                                    </Border>
                                    <Button Command="{Binding ActivateCommand}" CommandParameter="{Binding .}" x:Name="NotificationActivationButton" HorizontalAlignment="Stretch">
                                        <Button.Template>
                                            <ControlTemplate TargetType="Button">
                                                <Border Background="Transparent" BorderThickness="0">
                                                    <ContentPresenter/>
                                                </Border>
                                            </ControlTemplate>
                                        </Button.Template>
                                        <StackPanel VerticalAlignment="Center">
                                            <TextBlock Text="{Binding Text, Mode=OneWay}"  VerticalAlignment="Center"
                                                     TextWrapping="Wrap"
                                                     Padding="4"
                                                     Foreground="{DynamicResource TextBrush}"
                                                     Background="Transparent"
                                                     >
                                            </TextBlock>
                                        </StackPanel>
                                    </Button>
                                    <Button Command="{Binding ElementName=NotificationItemsControl, Path=DataContext.DeleteNotificationCommand}" 
                                            CommandParameter="{Binding .}"
                                            BorderThickness="0" Background="Transparent" Visibility="Hidden" HorizontalAlignment="Right"
                                            x:Name="HideButton">
                                        <TextBlock Text="" FontFamily="{StaticResource FontIcoFont}"/>
                                    </Button>
                                </Grid>
                                <DataTemplate.Triggers>
                                    <DataTrigger Binding="{Binding Type}" Value="{x:Static pn:NotificationType.Error}">
                                        <Setter Property="Background" Value="{DynamicResource WarningBrush}" TargetName="ItemBackground"/>
                                        <Setter Property="Opacity" Value="0.5" TargetName="ItemBackground"/>
                                    </DataTrigger>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Opacity" Value="0.27" TargetName="ItemBackground"/>
                                        <Setter Property="Visibility" Value="Visible" TargetName="HideButton"/>
                                        <Setter Property="OpacityMask" TargetName="NotificationActivationButton">
                                            <Setter.Value>
                                                <LinearGradientBrush StartPoint="0.9,0.5" EndPoint="1,0.5">
                                                    <LinearGradientBrush.GradientStops>
                                                        <GradientStop Color="White" Offset="0.0"/>
                                                        <GradientStop Color="#15FFFFFF" Offset="1"/>
                                                    </LinearGradientBrush.GradientStops>
                                                </LinearGradientBrush>
                                            </Setter.Value>
                                        </Setter>
                                    </Trigger>
                                    <DataTrigger Binding="{Binding ActivationAction}" Value="{x:Null}">
                                        <Setter Property="Cursor" TargetName="NotificationActivationButton" Value="Arrow"/>
                                    </DataTrigger>
                                </DataTemplate.Triggers>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                    <Grid Margin="0,2,0,0" Visibility="{Binding Settings.Settings.ShowNotificationButtons, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="3"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Button Command="{Binding ClearNotificationsCommand}" Grid.Column="0"
                                ClickMode="Release">
                            <TextBlock Text="{DynamicResource LOCDismissAll}" FontSize="{DynamicResource FontSizeSmall}"/>
                        </Button>
                        <Button Grid.Column="2" ClickMode="Release" Click="ToggleNotifications_Click">
                            <TextBlock Text="{DynamicResource LOCMinimize}" FontSize="{DynamicResource FontSizeSmall}"/>
                        </Button>
                    </Grid>
                </StackPanel>
            </Border>
        </Grid>
        <Grid VerticalAlignment="Top" HorizontalAlignment="Center" x:Name="ProgressbarGrid" Margin="0,0,0,0"
              WindowChrome.IsHitTestVisibleInChrome="True" Visibility="Collapsed">
            <Grid.OpacityMask>
                <VisualBrush AutoLayoutContent="True">
                    <VisualBrush.Visual>
                        <Border Background="Black" CornerRadius="0,0,6,6"
                                Width="{Binding ElementName=ProgressbarGrid, Path=ActualWidth}"
                                Height="{Binding ElementName=ProgressbarGrid, Path=ActualHeight}"
                                BorderThickness="0"/>
                    </VisualBrush.Visual>
                </VisualBrush>
            </Grid.OpacityMask>
            <Grid.Style>
                <Style TargetType="Grid">
                    <Setter Property="RenderTransform">
                        <Setter.Value>
                            <TranslateTransform Y="-60"/>
                        </Setter.Value>
                    </Setter>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Visibility, Mode=OneWay}" Value="{x:Static Visibility.Visible}">
                            <DataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation
                                                To="0"
                                                Storyboard.TargetProperty="(Grid.RenderTransform).(TranslateTransform.Y)">
                                            <DoubleAnimation.EasingFunction>
                                                <ElasticEase Springiness="12" Oscillations="2" EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.5"
                                                To="-60"
                                                Storyboard.TargetProperty="(Grid.RenderTransform).(TranslateTransform.Y)">
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.ExitActions>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Grid.Style>
            <ProgressBar x:Name="ProgressBar" MinWidth="350">
            </ProgressBar>
            <TextBlock x:Name="ProgressText" Margin="5" HorizontalAlignment="Center" VerticalAlignment="Center"/>
            <Button x:Name="ProgressCancelButton" VerticalAlignment="Center" HorizontalAlignment="Right" Content="X" Foreground="Red" Background="Transparent" BorderThickness="0" 
                    Visibility="{Binding ElementName=ProgressbarGrid, Path=IsMouseOver, Converter={StaticResource BooleanToVisibilityConverter}}">
            </Button>
        </Grid>
        <Button HorizontalAlignment="Left" VerticalAlignment="Bottom" Margin="4" Command="{Binding BackgroundViewModel.BackgroundSourceGame.OpenCommand}" Padding="0"
                Visibility="{Binding RootNodeViewModel.EditModeEnabled, Converter={StaticResource InvertedBooleanToVisibilityConverter}}">
            <Button.Template>
                <ControlTemplate TargetType="Button">
                    <Grid Visibility="{Binding BackgroundViewModel.BackgroundSourceGame, Converter={StaticResource NullToVisibilityConverter}}" Background="{x:Null}">
                        <Border Background="Black" CornerRadius="10" IsHitTestVisible="False"
                                Margin="0" Padding="0" Opacity="{Binding Settings.Settings.BackgroundGameInfoOpacity}" x:Name="GameNameBorder">
                        </Border>
                        <TextBlock  Opacity="{Binding Settings.Settings.BackgroundGameInfoOpacity}" Margin="0" Text="i" Foreground="White" MinWidth="20" Height="20" TextAlignment="Center"
                                    x:Name="BackgroundImageSourceGameTitle" FontSize="13" Padding="5,3" LineStackingStrategy="BlockLineHeight"
                                    LineHeight="{Binding RelativeSource={RelativeSource Mode=Self}, Path=FontSize}"
                                    IsHitTestVisible="False"/>
                        <Border Background="Transparent" CornerRadius="10" HorizontalAlignment="Left"
                                Margin="0" Padding="0" Width="20" Height="20">
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" Value="0.9" TargetName="BackgroundImageSourceGameTitle"/>
                            <Setter Property="Opacity" Value="0.3" TargetName="GameNameBorder"/>
                            <Setter Property="Text" Value="{Binding BackgroundViewModel.BackgroundSourceGame.Game.Name, FallbackValue=''}" TargetName="BackgroundImageSourceGameTitle"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Button.Template>
        </Button>
    </Grid>
</UserControl>
